{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\indieBubba\\\\frontend\\\\components\\\\Modal.js\";\n// reactstrap components\nimport { useMutation, useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { useState } from 'react';\nimport { Modal, ModalBody, ModalFooter } from 'reactstrap';\nimport styled from 'styled-components';\nimport useForm from '../lib/useForm';\nimport Form from './styles/Form';\nimport { useUser } from './User';\nconst ButtonStyles = styled.button.withConfig({\n  displayName: \"Modal__ButtonStyles\",\n  componentId: \"sc-1ssl16h-0\"\n})([\"width:auto;background:white;color:#015268;border:thin solid #000000;font-size:1.2em;font-weight:600;padding:0.5rem 1.2rem;margin-right:7px;\"]);\nconst SmallerButtonStyles = styled.button.withConfig({\n  displayName: \"Modal__SmallerButtonStyles\",\n  componentId: \"sc-1ssl16h-1\"\n})([\"width:auto;background:white;color:#015268;border:thin solid #000000;font-size:1.5rem;font-weight:bold;padding:0.5rem 1.2rem;\"]);\nconst MessageReceived = styled.p.withConfig({\n  displayName: \"Modal__MessageReceived\",\n  componentId: \"sc-1ssl16h-2\"\n})([\"background:#ffffff;color:#000000;border:thin solid #000000;border-radius:10px;padding:7px;width:90%;float:left;\"]);\nconst MessageSent = styled.p.withConfig({\n  displayName: \"Modal__MessageSent\",\n  componentId: \"sc-1ssl16h-3\"\n})([\"background:#dfffe9;color:#000000;border:thin solid #000000;border-radius:10px;padding:7px;width:90%;float:right;\"]);\nconst MessageSentSpan = styled.p.withConfig({\n  displayName: \"Modal__MessageSentSpan\",\n  componentId: \"sc-1ssl16h-4\"\n})([\"width:90%;float:right;text-align:right;padding-right:7px;\"]);\nconst MessageReceivedSpan = styled.p.withConfig({\n  displayName: \"Modal__MessageReceivedSpan\",\n  componentId: \"sc-1ssl16h-5\"\n})([\"width:90%;float:left;padding-left:7px;\"]);\nconst CREATE_CHAT_MUTATION = gql`\n  mutation CREATE_CHAT_MUTATION(\n    $message: String!\n    $id: ID!\n    $pageTypeMod: String!\n  ) {\n    createChatter(message: $message, id: $id, pageTypeMod: $pageTypeMod) {\n      id\n    }\n  }\n`;\nexport const ALL_CHATS_QUERY = gql`\n  query ALL_CHATS_QUERY($id: ID) {\n    chats(\n      where: { item: { id: { equals: $id } } }\n      orderBy: [{ timeStamp: asc }]\n    ) {\n      message\n      id\n      timeStamp\n      userFrom {\n        id\n      }\n      item {\n        id\n      }\n    }\n  }\n`;\nexport default function ModalFunction({\n  id,\n  pageTypeMod\n}) {\n  const {\n    inputs,\n    handleChange,\n    clearForm,\n    resetForm\n  } = useForm({\n    message: ''\n  });\n  const theUser = useUser();\n  const theId = theUser === null || theUser === void 0 ? void 0 : theUser.id;\n  const [createChatter, {\n    loadingCreate,\n    errorCreate,\n    dataCreate\n  }] = useMutation(CREATE_CHAT_MUTATION, {\n    variables: {\n      message: inputs.message,\n      id,\n      pageTypeMod\n    },\n    refetchQueries: [{\n      query: ALL_CHATS_QUERY\n    }, 'ALL_CHATS_QUERY']\n  });\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(ALL_CHATS_QUERY, {\n    variables: {\n      id\n    }\n  });\n  const {\n    0: modalOpen,\n    1: setModalOpen\n  } = useState(false);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading messages...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [pageTypeMod === 'buyer' && /*#__PURE__*/_jsxDEV(ButtonStyles, {\n      type: \"button\",\n      onClick: () => setModalOpen(!modalOpen),\n      children: \"Contact Seller\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this), pageTypeMod === 'seller' && /*#__PURE__*/_jsxDEV(ButtonStyles, {\n      type: \"button\",\n      onClick: () => setModalOpen(!modalOpen),\n      children: \"Contact Buyer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      toggle: () => setModalOpen(!modalOpen),\n      isOpen: modalOpen,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \" modal-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \" modal-title\",\n          style: {\n            width: '90%',\n            textAlign: 'center',\n            fontSize: '1.3em'\n          },\n          children: \"Messages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SmallerButtonStyles, {\n          \"aria-label\": \"Close\",\n          className: \" close\",\n          type: \"button\",\n          onClick: () => setModalOpen(!modalOpen),\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            \"aria-hidden\": true,\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        children: data.chats.map(chat => {\n          const dateTime = new Date(chat.timeStamp);\n          let dt = dateTime.toGMTString();\n          dt = dt.replace('GMT', '');\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [chat.userFrom.id === theId && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(MessageSentSpan, {\n                children: dt\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(MessageSent, {\n                children: chat.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true), chat.userFrom.id !== theId && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(MessageReceivedSpan, {\n                children: dt\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(MessageReceived, {\n                children: chat.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true)]\n          }, chat.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          style: {\n            width: '100%'\n          },\n          onSubmit: async e => {\n            e.preventDefault();\n            const res = await createChatter();\n            clearForm();\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            style: {\n              width: '100%',\n              marginBottom: '7px'\n            },\n            rows: \"3\",\n            required: true,\n            id: \"message\",\n            name: \"message\",\n            placeholder: \"Message\",\n            value: inputs.message,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SmallerButtonStyles, {\n            type: \"submit\",\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}","map":{"version":3,"sources":["C:/Users/User/Documents/indieBubba/frontend/components/Modal.js"],"names":["useMutation","useQuery","gql","useState","Modal","ModalBody","ModalFooter","styled","useForm","Form","useUser","ButtonStyles","button","SmallerButtonStyles","MessageReceived","p","MessageSent","MessageSentSpan","MessageReceivedSpan","CREATE_CHAT_MUTATION","ALL_CHATS_QUERY","ModalFunction","id","pageTypeMod","inputs","handleChange","clearForm","resetForm","message","theUser","theId","createChatter","loadingCreate","errorCreate","dataCreate","variables","refetchQueries","query","data","error","loading","modalOpen","setModalOpen","width","textAlign","fontSize","chats","map","chat","dateTime","Date","timeStamp","dt","toGMTString","replace","userFrom","e","preventDefault","res","marginBottom"],"mappings":"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","sourcesContent":["// reactstrap components\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport gql from 'graphql-tag';\r\nimport { useState } from 'react';\r\nimport { Modal, ModalBody, ModalFooter } from 'reactstrap';\r\nimport styled from 'styled-components';\r\nimport useForm from '../lib/useForm';\r\nimport Form from './styles/Form';\r\nimport { useUser } from './User';\r\n\r\nconst ButtonStyles = styled.button`\r\n  width: auto;\r\n  background: white;\r\n  color: #015268;\r\n  border: thin solid #000000;\r\n  font-size: 1.2em;\r\n  font-weight: 600;\r\n  padding: 0.5rem 1.2rem;\r\n  margin-right: 7px;\r\n`;\r\n\r\nconst SmallerButtonStyles = styled.button`\r\n  width: auto;\r\n  background: white;\r\n  color: #015268;\r\n  border: thin solid #000000;\r\n  font-size: 1.5rem;\r\n  font-weight: bold;\r\n  padding: 0.5rem 1.2rem;\r\n`;\r\n\r\nconst MessageReceived = styled.p`\r\n  background: #ffffff;\r\n  color: #000000;\r\n  border: thin solid #000000;\r\n  border-radius: 10px;\r\n  padding: 7px;\r\n  width: 90%;\r\n  float: left;\r\n`;\r\n\r\nconst MessageSent = styled.p`\r\n  background: #dfffe9;\r\n  color: #000000;\r\n  border: thin solid #000000;\r\n  border-radius: 10px;\r\n  padding: 7px;\r\n  width: 90%;\r\n  float: right;\r\n`;\r\n\r\nconst MessageSentSpan = styled.p`\r\n  width: 90%;\r\n  float: right;\r\n  text-align: right;\r\n  padding-right: 7px;\r\n`;\r\nconst MessageReceivedSpan = styled.p`\r\n  width: 90%;\r\n  float: left;\r\n  padding-left: 7px;\r\n`;\r\n\r\nconst CREATE_CHAT_MUTATION = gql`\r\n  mutation CREATE_CHAT_MUTATION(\r\n    $message: String!\r\n    $id: ID!\r\n    $pageTypeMod: String!\r\n  ) {\r\n    createChatter(message: $message, id: $id, pageTypeMod: $pageTypeMod) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ALL_CHATS_QUERY = gql`\r\n  query ALL_CHATS_QUERY($id: ID) {\r\n    chats(\r\n      where: { item: { id: { equals: $id } } }\r\n      orderBy: [{ timeStamp: asc }]\r\n    ) {\r\n      message\r\n      id\r\n      timeStamp\r\n      userFrom {\r\n        id\r\n      }\r\n      item {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function ModalFunction({ id, pageTypeMod }) {\r\n  const { inputs, handleChange, clearForm, resetForm } = useForm({\r\n    message: '',\r\n  });\r\n\r\n  const theUser = useUser();\r\n  const theId = theUser?.id;\r\n\r\n  const [createChatter, { loadingCreate, errorCreate, dataCreate }] =\r\n    useMutation(CREATE_CHAT_MUTATION, {\r\n      variables: {\r\n        message: inputs.message,\r\n        id,\r\n        pageTypeMod,\r\n      },\r\n      refetchQueries: [{ query: ALL_CHATS_QUERY }, 'ALL_CHATS_QUERY'],\r\n    });\r\n\r\n  const { data, error, loading } = useQuery(ALL_CHATS_QUERY, {\r\n    variables: {\r\n      id,\r\n    },\r\n  });\r\n\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n\r\n  if (loading) return <p>Loading messages...</p>;\r\n  if (error) return <p>Error: {error.message}</p>;\r\n  return (\r\n    <>\r\n      {pageTypeMod === 'buyer' && (\r\n        <ButtonStyles type=\"button\" onClick={() => setModalOpen(!modalOpen)}>\r\n          Contact Seller\r\n        </ButtonStyles>\r\n      )}\r\n      {pageTypeMod === 'seller' && (\r\n        <ButtonStyles type=\"button\" onClick={() => setModalOpen(!modalOpen)}>\r\n          Contact Buyer\r\n        </ButtonStyles>\r\n      )}\r\n\r\n      <Modal toggle={() => setModalOpen(!modalOpen)} isOpen={modalOpen}>\r\n        <div className=\" modal-header\">\r\n          <h5\r\n            className=\" modal-title\"\r\n            style={{ width: '90%', textAlign: 'center', fontSize: '1.3em' }}\r\n          >\r\n            Messages\r\n          </h5>\r\n          <SmallerButtonStyles\r\n            aria-label=\"Close\"\r\n            className=\" close\"\r\n            type=\"button\"\r\n            onClick={() => setModalOpen(!modalOpen)}\r\n          >\r\n            <span aria-hidden>×</span>\r\n          </SmallerButtonStyles>\r\n        </div>\r\n        <ModalBody>\r\n          {data.chats.map((chat) => {\r\n            const dateTime = new Date(chat.timeStamp);\r\n            let dt = dateTime.toGMTString();\r\n            dt = dt.replace('GMT', '');\r\n            return (\r\n              <div key={chat.id}>\r\n                {chat.userFrom.id === theId && (\r\n                  <>\r\n                    <MessageSentSpan>{dt}</MessageSentSpan>\r\n                    <MessageSent>{chat.message}</MessageSent>\r\n                  </>\r\n                )}\r\n                {chat.userFrom.id !== theId && (\r\n                  <>\r\n                    <MessageReceivedSpan>{dt}</MessageReceivedSpan>\r\n                    <MessageReceived>{chat.message}</MessageReceived>\r\n                  </>\r\n                )}\r\n              </div>\r\n            );\r\n          })}\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Form\r\n            style={{ width: '100%' }}\r\n            onSubmit={async (e) => {\r\n              e.preventDefault();\r\n              const res = await createChatter();\r\n              clearForm();\r\n            }}\r\n          >\r\n            <textarea\r\n              style={{ width: '100%', marginBottom: '7px' }}\r\n              rows=\"3\"\r\n              required\r\n              id=\"message\"\r\n              name=\"message\"\r\n              placeholder=\"Message\"\r\n              value={inputs.message}\r\n              onChange={handleChange}\r\n            />\r\n            <SmallerButtonStyles type=\"submit\">Send</SmallerButtonStyles>\r\n          </Form>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}